{"version":3,"sources":["components/BoxValue.js","components/CheckBoxValue.js","components/DiceRollerIFT.js","components/AlertResult.js","components/CardIFT.js","components/DiceRollerCC.js","components/CardCC.js","App.js","serviceWorker.js","index.js"],"names":["Box","styled","div","_templateObject","BoxValue","_ref","title","thisNumberValue","thisStateSet","react_default","a","createElement","type","placeholder","value","onChange","event","target","CheckBox","CheckBoxValue_templateObject","CheckBoxValue","info","thisCheckValue","checked","Roller","DiceRollerIFT_templateObject","RollButton","button","_templateObject2","generateDieRoll","Random","int","rollTheDice","props","dieOne","dieTwo","setDieOne","setDieTwo","resultTotal","Number","modifier","setDiceTotal","setROF","rateOfFire","alert","checkROF","cowerCheck","checkCowering","setCowering","currentFPColumn","firePower","fpColumn","i","dataIFT","determineFPColumn","doubleCowering","noCowering","setCombatResult","columnIndex","indexOf","DiceRollerIFT","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","_useState5","_useState6","diceTotal","onClick","Alert","AlertResult_templateObject","AlertResult","alertHeader","ContainerIFT","CardIFT_templateObject","CardIFT","setFirePower","combatModifier","setCombatModifier","setRateOfFire","_useState7","_useState8","rofMaintained","setRofMaintained","_useState9","_useState10","setNoCowering","_useState11","_useState12","setDoubleCowering","_useState13","_useState14","isCowering","_useState15","_useState16","combatResult","className","components_BoxValue","components_CheckBoxValue","components_DiceRollerIFT","components_AlertResult","DiceRollerCC_templateObject","DiceRollerCC_templateObject2","closeCombatModifier","toKillNumber","ratioFP","dataCC","Min","Max","getToKillNumber","atkFirePower","defFirePower","handToHand","setCombatRatio","concat","Ratio","setCloseCombatResult","DiceRollerCC","DiceRollerCC_Roller","DiceRollerCC_RollButton","ContainerCC","CardCC_templateObject","CardCC","setAtkFirePower","setDefFirePower","setCloseCombatModifier","setHandToHand","combatRatio","closeCombatResult","components_DiceRollerCC","Container","App_templateObject","App","components_CardIFT","components_CardCC","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m/DAGA,IAAMA,EAAMC,IAAOC,IAAVC,KA2BMC,EAdE,SAAAC,GAA8C,IAA3CC,EAA2CD,EAA3CC,MAAOC,EAAoCF,EAApCE,gBAAiBC,EAAmBH,EAAnBG,aAC1C,OACEC,EAAAC,EAAAC,cAACX,EAAD,KACES,EAAAC,EAAAC,cAAA,aAAQL,GACRG,EAAAC,EAAAC,cAAA,SACEC,KAAK,SACLC,YAAY,IACZC,MAAOP,EACPQ,SAAU,SAAAC,GAAK,OAAIR,EAAaQ,EAAMC,OAAOH,2GCrBrD,IAAMI,EAAWjB,IAAOC,IAAViB,KAoBCC,EAhBO,SAAAf,GAAmD,IAAhDC,EAAgDD,EAAhDC,MAAOe,EAAyChB,EAAzCgB,KAAMC,EAAmCjB,EAAnCiB,eAAgBd,EAAmBH,EAAnBG,aACpD,OACEC,EAAAC,EAAAC,cAACO,EAAD,KACET,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEC,KAAK,WACLW,QAASD,EACTP,SAAU,SAAAC,GAAK,OAAIR,EAAaQ,EAAMC,OAAOM,YAE/Cd,EAAAC,EAAAC,cAAA,cAASL,GACRe,gYCXT,IAAMG,EAASvB,IAAOC,IAAVuB,KAQNC,EAAazB,IAAO0B,OAAVC,KAWVC,EAAkB,WACtB,OAAOC,IAAOC,IAAI,EAAG,IAoCjBC,EAAc,SAAAC,GAElB,IAAIC,EAASL,IACTM,EAASN,IAEbI,EAAMG,UAAUF,GAChBD,EAAMI,UAAUF,GAChB,IAAIG,EAAcJ,EAASC,EAASI,OAAON,EAAMO,UACjDP,EAAMQ,aAAaH,GAEfA,EAAc,GAChBA,EAAc,GACLA,EAAc,IACvBA,EAAc,GAGhBL,EAAMS,OAhDS,SAACR,EAAQS,GACxB,QAAmB,IAAfA,GAAoBT,EAASS,KAEtBT,GAAUS,IAGnBC,MAAM,uBACC,IAyCIC,CAASX,EAAQD,EAAMU,aACpC,IAAIG,EArCgB,SAACZ,EAAQC,GAC7B,OAAID,IAAWC,EAoCEY,CAAcb,EAAQC,GACvCF,EAAMe,YAAYF,GAElB,IAAIG,EA/BoB,SAAAC,GACxB,IAAIC,EAAW,EACf,IAAK,IAAIC,KAAKC,EACRH,GAAaX,OAAOa,KACtBD,EAAWZ,OAAOa,IAGtB,OAAOD,EAwBeG,CAAkBrB,EAAMiB,WAE9C,GAAwB,IAApBD,EAAuB,CAEzB,IACiB,IAAfH,IACyB,IAAzBb,EAAMsB,iBACe,IAArBtB,EAAMuB,WAGN,GAAwB,IAApBP,EACFA,EAAkB,EAClBhB,EAAMwB,gBAAgB,kCACjB,CACL,IAAIC,EAAcL,EAAO,OAAWM,QAAQV,GAC5CA,EAAkBI,EAAO,OAAWK,EAAc,QAE/C,IACU,IAAfZ,IACyB,IAAzBb,EAAMsB,iBACe,IAArBtB,EAAMuB,WAGN,GAAwB,IAApBP,GAA6C,IAApBA,EAC3BA,EAAkB,EAClBhB,EAAMwB,gBAAgB,kCACjB,CACL,IAAIC,EAAcL,EAAO,OAAWM,QAAQV,GAC5CA,EAAkBI,EAAO,OAAWK,EAAc,GAI9B,IAApBT,GACFhB,EAAMwB,gBAAgBJ,EAAQJ,GAAiBX,MAiDtCsB,EA5CO,SAAAvD,GAShB,IARJ6C,EAQI7C,EARJ6C,UACAV,EAOInC,EAPJmC,SACAG,EAMItC,EANJsC,WACAD,EAKIrC,EALJqC,OACAM,EAII3C,EAJJ2C,YACAS,EAGIpD,EAHJoD,gBACAD,EAEInD,EAFJmD,WACAD,EACIlD,EADJkD,eACIM,EAEwBC,mBAAS,GAFjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEG3B,EAFH6B,EAAA,GAEW3B,EAFX2B,EAAA,GAAAG,EAGwBJ,mBAAS,GAHjCK,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAGG/B,EAHHgC,EAAA,GAGW9B,EAHX8B,EAAA,GAAAC,EAI8BN,mBAAS,GAJvCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAIGE,EAJHD,EAAA,GAIc5B,EAJd4B,EAAA,GAMJ,OACE5D,EAAAC,EAAAC,cAACa,EAAD,KACEf,EAAAC,EAAAC,cAACe,EAAD,CACE6C,QAAS,kBACPvC,EAAY,CACVsC,YACAlC,YACAC,YACAI,eACAS,YACAV,WACAG,aACAD,SACAM,cACAS,kBACAD,aACAD,qBAdN,QAmBA9C,EAAAC,EAAAC,cAAA,yBACcF,EAAAC,EAAAC,cAAA,YAAOuB,GADrB,MACuCC,GAEvC1B,EAAAC,EAAAC,cAAA,oBAAY2D,qOC5JlB,IAAME,EAAQvE,IAAOC,IAAVuE,KAoBIC,EARK,SAAArE,GAAqB,IAAlBsE,EAAkBtE,EAAlBsE,YACrB,OACElE,EAAAC,EAAAC,cAAC6D,EAAD,KACE/D,EAAAC,EAAAC,cAAA,UAAKgE,ogBCVX,IAAMC,EAAe3E,IAAOC,IAAV2E,KAoGHC,EA1EC,WAAM,IAAAjB,EACcC,mBAAS,GADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACbX,EADaa,EAAA,GACFgB,EADEhB,EAAA,GAAAG,EAEwBJ,mBAAS,GAFjCK,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAEbc,EAFab,EAAA,GAEGc,EAFHd,EAAA,GAAAC,EAGgBN,mBAAS,GAHzBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGbzB,EAHa0B,EAAA,GAGDa,EAHCb,EAAA,GAAAc,EAIsBrB,oBAAS,GAJ/BsB,EAAApB,OAAAC,EAAA,EAAAD,CAAAmB,EAAA,GAIbE,EAJaD,EAAA,GAIEE,EAJFF,EAAA,GAAAG,EAKgBzB,oBAAS,GALzB0B,EAAAxB,OAAAC,EAAA,EAAAD,CAAAuB,EAAA,GAKb/B,EALagC,EAAA,GAKDC,EALCD,EAAA,GAAAE,EAMwB5B,oBAAS,GANjC6B,EAAA3B,OAAAC,EAAA,EAAAD,CAAA0B,EAAA,GAMbnC,EANaoC,EAAA,GAMGC,EANHD,EAAA,GAAAE,EAOc/B,oBAAS,GAPvBgC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GAObE,EAPaD,EAAA,GAOD9C,EAPC8C,EAAA,GAAAE,EAQoBlC,mBAAS,IAR7BmC,EAAAjC,OAAAC,EAAA,EAAAD,CAAAgC,EAAA,GAQbE,EARaD,EAAA,GAQCxC,EARDwC,EAAA,GAUpB,OACExF,EAAAC,EAAAC,cAACiE,EAAD,KACEnE,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKwF,UAAU,aACb1F,EAAAC,EAAAC,cAACyF,EAAD,CACE9F,MAAM,YACNC,gBAAiB2C,EACjB1C,aAAcuE,IAEhBtE,EAAAC,EAAAC,cAACyF,EAAD,CACE9F,MAAM,WACNC,gBAAiByE,EACjBxE,aAAcyE,IAEhBxE,EAAAC,EAAAC,cAACyF,EAAD,CACE9F,MAAM,eACNC,gBAAiBoC,EACjBnC,aAAc0E,KAGlBzE,EAAAC,EAAAC,cAAC0F,EAAD,CACE/F,MAAM,gBACNe,KAAK,+LACLC,eAAgBkC,EAChBhD,aAAciF,IAEhBhF,EAAAC,EAAAC,cAAC0F,EAAD,CACE/F,MAAM,oBACNe,KAAK,uCACLC,eAAgBiC,EAChB/C,aAAcoF,KAGlBnF,EAAAC,EAAAC,cAAA,OAAKwF,UAAU,cACb1F,EAAAC,EAAAC,cAAC2F,EAAD,CACEpD,UAAWA,EACXV,SAAUwC,EACVrC,WAAYA,EACZD,OAAQ4C,EACRtC,YAAaA,EACbS,gBAAiBA,EACjBF,eAAgBA,EAChBC,WAAYA,MAGG,IAAlB6B,GACC5E,EAAAC,EAAAC,cAAC4F,EAAD,CAAa5B,YAAY,8BAEX,IAAfoB,IACgB,IAAfvC,IACmB,IAAnBD,GACE9C,EAAAC,EAAAC,cAAC4F,EAAD,CAAa5B,YAAY,4BAEb,IAAfoB,IACoB,IAAnBxC,IACe,IAAfC,GACE/C,EAAAC,EAAAC,cAAC4F,EAAD,CAAa5B,YAAY,kCAEX,KAAjBuB,GAAuBzF,EAAAC,EAAAC,cAAC4F,EAAD,CAAa5B,YAAauB,gXCjGxD,IAAM1E,EAASvB,IAAOC,IAAVsG,KAQN9E,EAAazB,IAAO0B,OAAV8E,KAWV5E,EAAkB,WACtB,OAAOC,IAAOC,IAAI,EAAG,IAgBjBC,EAAc,SAAAC,GAElB,IAAIC,EAASL,IACTM,EAASN,IAGbI,EAAMG,UAAUF,GAChBD,EAAMI,UAAUF,GAChB,IAAIG,EAAcJ,EAASC,EAASI,OAAON,EAAMyE,qBACjDzE,EAAMQ,aAAaH,GAGnB,IACIqE,EAzBkB,SAAAC,GACtB,IAAK,IAAIxD,KAAKyD,EAAQ,CACpB,GAAgB,KAAZD,EACF,OAAO,GACF,GAAIA,EAAU,GACnB,OAAO,GACF,GAAIA,GAAWC,EAAOzD,GAAG0D,KAAOF,EAAUC,EAAOzD,GAAG2D,IACzD,OAAOxE,OAAOa,IAkBC4D,CADL/E,EAAMgF,aAAehF,EAAMiF,eAEhB,IAArBjF,EAAMkF,aACRR,GAAgB,GAElB1E,EAAMmF,eAAN,gBAAAC,OAEIR,EAAOF,GAAcW,MAFzB,6BAAAD,OAG8BV,IAI1BrE,EAAcqE,EAChB1E,EAAMsF,qBAAqB,8BAClBjF,IAAgBqE,EACzB1E,EAAMsF,qBAAqB,gCAE3BtF,EAAMsF,qBAAqB,cA0ChBC,EAtCM,SAAAnH,GAOf,IANJ4G,EAMI5G,EANJ4G,aACAC,EAKI7G,EALJ6G,aACAR,EAIIrG,EAJJqG,oBACAS,EAGI9G,EAHJ8G,WACAC,EAEI/G,EAFJ+G,eACAG,EACIlH,EADJkH,qBACI1D,EACwBC,mBAAS,GADjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACG3B,EADH6B,EAAA,GACW3B,EADX2B,EAAA,GAAAG,EAEwBJ,mBAAS,GAFjCK,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAEG/B,EAFHgC,EAAA,GAEW9B,EAFX8B,EAAA,GAAAC,EAG8BN,mBAAS,GAHvCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGGE,EAHHD,EAAA,GAGc5B,EAHd4B,EAAA,GAKJ,OACE5D,EAAAC,EAAAC,cAAC8G,EAAD,KACEhH,EAAAC,EAAAC,cAAC+G,EAAD,CACEnD,QAAS,kBACPvC,EAAY,CACVI,YACAC,YACAI,eACAwE,eACAC,eACAR,sBACAS,aACAC,iBACAG,2BAXN,QAgBA9G,EAAAC,EAAAC,cAAA,yBACcF,EAAAC,EAAAC,cAAA,YAAOuB,GADrB,MACuCC,GAEvC1B,EAAAC,EAAAC,cAAA,oBAAY2D,ogBCpGlB,IAAMqD,EAAc1H,IAAOC,IAAV0H,KAgFFC,EAtDA,WAAM,IAAAhE,EACqBC,mBAAS,GAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZoD,EADYlD,EAAA,GACE+D,EADF/D,EAAA,GAAAG,EAEqBJ,mBAAS,GAF9BK,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAEZgD,EAFY/C,EAAA,GAEE4D,EAFF5D,EAAA,GAAAC,EAGmCN,mBAAS,GAH5CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGZsC,EAHYrC,EAAA,GAGS2D,EAHT3D,EAAA,GAAAc,EAIiBrB,oBAAS,GAJ1BsB,EAAApB,OAAAC,EAAA,EAAAD,CAAAmB,EAAA,GAIZgC,EAJY/B,EAAA,GAIA6C,EAJA7C,EAAA,GAAAG,EAKmBzB,mBAAS,IAL5B0B,EAAAxB,OAAAC,EAAA,EAAAD,CAAAuB,EAAA,GAKZ2C,EALY1C,EAAA,GAKC4B,EALD5B,EAAA,GAAAE,EAM+B5B,mBAAS,IANxC6B,EAAA3B,OAAAC,EAAA,EAAAD,CAAA0B,EAAA,GAMZyC,EANYxC,EAAA,GAMO4B,EANP5B,EAAA,GAQnB,OACElF,EAAAC,EAAAC,cAACgH,EAAD,KACElH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKwF,UAAU,aACb1F,EAAAC,EAAAC,cAACyF,EAAD,CACE9F,MAAM,uBACNC,gBAAiB0G,EACjBzG,aAAcsH,IAEhBrH,EAAAC,EAAAC,cAACyF,EAAD,CACE9F,MAAM,uBACNC,gBAAiB2G,EACjB1G,aAAcuH,IAEhBtH,EAAAC,EAAAC,cAACyF,EAAD,CACE9F,MAAM,WACNC,gBAAiBmG,EACjBlG,aAAcwH,KAGlBvH,EAAAC,EAAAC,cAAC0F,EAAD,CACE/F,MAAM,eACNe,KAAK,GACLC,eAAgB6F,EAChB3G,aAAcyH,KAGlBxH,EAAAC,EAAAC,cAAA,OAAKwF,UAAU,cACb1F,EAAAC,EAAAC,cAACyH,EAAD,CACEnB,aAAcA,EACdC,aAAcA,EACdR,oBAAqBA,EACrBS,WAAYA,EACZC,eAAgBA,EAChBG,qBAAsBA,KAGT,KAAhBW,GAAsBzH,EAAAC,EAAAC,cAAC4F,EAAD,CAAa5B,YAAauD,IAC1B,KAAtBC,GACC1H,EAAAC,EAAAC,cAAC4F,EAAD,CAAa5B,YAAawD,2PC5ElC,IAAME,EAAYpI,IAAOC,IAAVoI,KA0BAC,MAZf,WACE,OACE9H,EAAAC,EAAAC,cAAC0H,EAAD,KACE5H,EAAAC,EAAAC,cAAA,0DACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6H,EAAD,CAASrC,UAAU,aACnB1F,EAAAC,EAAAC,cAAC8H,EAAD,CAAQtC,UAAU,eCdNuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvI,EAAAC,EAAAC,cAACsI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7cfa230b.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Box = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  width: 10em;\r\n\r\n  label {\r\n    padding-bottom: 0.5em;\r\n  }\r\n  input {\r\n    font-size: 2em;\r\n  }\r\n`;\r\n\r\nconst BoxValue = ({ title, thisNumberValue, thisStateSet }) => {\r\n  return (\r\n    <Box>\r\n      <label>{title}</label>\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"0\"\r\n        value={thisNumberValue}\r\n        onChange={event => thisStateSet(event.target.value)}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BoxValue;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CheckBox = styled.div`\r\n  padding-bottom: 5px;\r\n`;\r\n\r\nconst CheckBoxValue = ({ title, info, thisCheckValue, thisStateSet }) => {\r\n  return (\r\n    <CheckBox>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={thisCheckValue}\r\n          onChange={event => thisStateSet(event.target.checked)}\r\n        />\r\n        <strong>{title}</strong>\r\n        {info}\r\n      </label>\r\n    </CheckBox>\r\n  );\r\n};\r\n\r\nexport default CheckBoxValue;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Random from 'random';\r\n\r\nimport dataIFT from '../data/dataIFT.json';\r\n\r\nconst Roller = styled.div`\r\n  text-align: center;\r\n\r\n  span {\r\n    color: #ff6942;\r\n  }\r\n`;\r\n\r\nconst RollButton = styled.button`\r\n  width: 8em;\r\n  height: 2em;\r\n  background-color: #db5538;\r\n  color: #763b3b;\r\n  border: 3px solid #763b3b;\r\n  border-radius: 2px;\r\n  font-size: 2em;\r\n`;\r\n\r\n// Simple function to generate a 1d6 die roll.\r\nconst generateDieRoll = () => {\r\n  return Random.int(1, 6);\r\n};\r\n\r\n// Do a ROF Check - If die one is less than or equal to the unit ROF, ROF is maintained.\r\nconst checkROF = (dieOne, rateOfFire) => {\r\n  if (rateOfFire === 0 || dieOne > rateOfFire) {\r\n    return false;\r\n  } else if (dieOne <= rateOfFire) {\r\n    return true;\r\n  } else {\r\n    alert('Rate of Fire ERROR');\r\n    return false;\r\n  }\r\n};\r\n\r\n// Do a Cowering Check - If die one is equal to die two the unit cowers in most cases.\r\nconst checkCowering = (dieOne, dieTwo) => {\r\n  if (dieOne === dieTwo) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Determines IFT Table FP Column - ASL uses the column that your FP is >= to, ex. if you have 5 FP it's a 4 FP result.\r\nconst determineFPColumn = firePower => {\r\n  let fpColumn = 0;\r\n  for (let i in dataIFT) {\r\n    if (firePower >= Number(i)) {\r\n      fpColumn = Number(i);\r\n    }\r\n  }\r\n  return fpColumn;\r\n};\r\n\r\n// Function that uses the die roller and puts the results into the states for 2d6.\r\nconst rollTheDice = props => {\r\n  // This was originally just setDieOne(generateDieRoll()) etc., however this allows for better splitting of needs.\r\n  let dieOne = generateDieRoll();\r\n  let dieTwo = generateDieRoll();\r\n  // Set die states.\r\n  props.setDieOne(dieOne);\r\n  props.setDieTwo(dieTwo);\r\n  let resultTotal = dieOne + dieTwo + Number(props.modifier);\r\n  props.setDiceTotal(resultTotal);\r\n  // Adjust result total to properly read the table if higher/lower than set values. This is how the game rules work anyways.\r\n  if (resultTotal > 15) {\r\n    resultTotal = 15;\r\n  } else if (resultTotal < 0) {\r\n    resultTotal = 0;\r\n  }\r\n  // Do ROF/Cowering checks and set their states respectively.\r\n  props.setROF(checkROF(dieOne, props.rateOfFire));\r\n  let cowerCheck = checkCowering(dieOne, dieTwo);\r\n  props.setCowering(cowerCheck);\r\n  // Determine the correct FP column to use and then set the result accordingly with dice roll.\r\n  let currentFPColumn = determineFPColumn(props.firePower);\r\n  // FP Can't be 0\r\n  if (currentFPColumn !== 0) {\r\n    // Adjust FP column further based on whether the unit cowers or not\r\n    if (\r\n      cowerCheck === true &&\r\n      props.doubleCowering === false &&\r\n      props.noCowering === false\r\n    ) {\r\n      // If a cower goes off the table it's no result.\r\n      if (currentFPColumn === 1) {\r\n        currentFPColumn = 0;\r\n        props.setCombatResult('No Result Due To Cowering.');\r\n      } else {\r\n        let columnIndex = dataIFT['keymap'].indexOf(currentFPColumn);\r\n        currentFPColumn = dataIFT['keymap'][columnIndex - 1];\r\n      }\r\n    } else if (\r\n      cowerCheck === true &&\r\n      props.doubleCowering === true &&\r\n      props.noCowering === false\r\n    ) {\r\n      // If a cower goes off the table it's no result.\r\n      if (currentFPColumn === 1 || currentFPColumn === 2) {\r\n        currentFPColumn = 0;\r\n        props.setCombatResult('No Result Due To Cowering.');\r\n      } else {\r\n        let columnIndex = dataIFT['keymap'].indexOf(currentFPColumn);\r\n        currentFPColumn = dataIFT['keymap'][columnIndex - 2];\r\n      }\r\n    }\r\n    // If a cower goes off this has already been set to No Result.\r\n    if (currentFPColumn !== 0) {\r\n      props.setCombatResult(dataIFT[currentFPColumn][resultTotal]);\r\n    }\r\n  }\r\n};\r\n\r\nconst DiceRollerIFT = ({\r\n  firePower,\r\n  modifier,\r\n  rateOfFire,\r\n  setROF,\r\n  setCowering,\r\n  setCombatResult,\r\n  noCowering,\r\n  doubleCowering\r\n}) => {\r\n  // Start die states at 0 so people can't cheat with a starting snake eyes pretend roll.\r\n  const [dieOne, setDieOne] = useState(0);\r\n  const [dieTwo, setDieTwo] = useState(0);\r\n  const [diceTotal, setDiceTotal] = useState(0);\r\n\r\n  return (\r\n    <Roller>\r\n      <RollButton\r\n        onClick={() =>\r\n          rollTheDice({\r\n            diceTotal,\r\n            setDieOne,\r\n            setDieTwo,\r\n            setDiceTotal,\r\n            firePower,\r\n            modifier,\r\n            rateOfFire,\r\n            setROF,\r\n            setCowering,\r\n            setCombatResult,\r\n            noCowering,\r\n            doubleCowering\r\n          })\r\n        }>\r\n        Roll\r\n      </RollButton>\r\n      <h4>\r\n        Dice Rolls: <span>{dieOne}</span> | {dieTwo}\r\n      </h4>\r\n      <h3>Total: {diceTotal}</h3>\r\n    </Roller>\r\n  );\r\n};\r\n\r\nexport default DiceRollerIFT;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Alert = styled.div`\r\n  text-align: center;\r\n  font-size: 2em;\r\n  color: #fcfcfc;\r\n  background-color: #42548d;\r\n\r\n  h4 {\r\n    margin-top: 0.5em;\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n\r\nconst AlertResult = ({ alertHeader }) => {\r\n  return (\r\n    <Alert>\r\n      <h4>{alertHeader}</h4>\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default AlertResult;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport BoxValue from './BoxValue';\r\nimport CheckBoxValue from './CheckBoxValue';\r\nimport DiceRollerIFT from './DiceRollerIFT';\r\nimport AlertResult from './AlertResult';\r\n\r\nconst ContainerIFT = styled.div`\r\n  background-color: #212121;\r\n  padding-bottom: 0.5em;\r\n\r\n  h2 {\r\n    background-color: #ff6942;\r\n    padding-left: 3px;\r\n    padding-bottom: 3px;\r\n  }\r\n  form {\r\n    padding-left: 1em;\r\n    padding-right: 1em;\r\n    padding-bottom: 1em;\r\n  }\r\n  .div-boxes {\r\n    display: flex;\r\n    flex-flow: wrap;\r\n    justify-content: space-evenly;\r\n    padding-bottom: 1em;\r\n  }\r\n  .div-roller {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst CardIFT = () => {\r\n  const [firePower, setFirePower] = useState(1);\r\n  const [combatModifier, setCombatModifier] = useState(0);\r\n  const [rateOfFire, setRateOfFire] = useState(0);\r\n  const [rofMaintained, setRofMaintained] = useState(false);\r\n  const [noCowering, setNoCowering] = useState(false);\r\n  const [doubleCowering, setDoubleCowering] = useState(false);\r\n  const [isCowering, setCowering] = useState(false);\r\n  const [combatResult, setCombatResult] = useState('');\r\n\r\n  return (\r\n    <ContainerIFT>\r\n      <h2>Infantry Fire Table</h2>\r\n      <form>\r\n        <div className=\"div-boxes\">\r\n          <BoxValue\r\n            title=\"Firepower\"\r\n            thisNumberValue={firePower}\r\n            thisStateSet={setFirePower}\r\n          />\r\n          <BoxValue\r\n            title=\"Modifier\"\r\n            thisNumberValue={combatModifier}\r\n            thisStateSet={setCombatModifier}\r\n          />\r\n          <BoxValue\r\n            title=\"Rate of Fire\"\r\n            thisNumberValue={rateOfFire}\r\n            thisStateSet={setRateOfFire}\r\n          />\r\n        </div>\r\n        <CheckBoxValue\r\n          title=\"No Cowering: \"\r\n          info=\"Fire is from a SMC(or led FG), berserk/Fanatic unit, Fire Lane, IFE, Canister, Aircraft, British Elite/First Line unit, Finns, Sniper, ordnance, OBA, any form of vehicular fire, CC, or DC.\"\r\n          thisCheckValue={noCowering}\r\n          thisStateSet={setNoCowering}\r\n        />\r\n        <CheckBoxValue\r\n          title=\"Double Cowering: \"\r\n          info=\"Fire is from Inexperienced Personnel\"\r\n          thisCheckValue={doubleCowering}\r\n          thisStateSet={setDoubleCowering}\r\n        />\r\n      </form>\r\n      <div className=\"div-roller\">\r\n        <DiceRollerIFT\r\n          firePower={firePower}\r\n          modifier={combatModifier}\r\n          rateOfFire={rateOfFire}\r\n          setROF={setRofMaintained}\r\n          setCowering={setCowering}\r\n          setCombatResult={setCombatResult}\r\n          doubleCowering={doubleCowering}\r\n          noCowering={noCowering}\r\n        />\r\n      </div>\r\n      {rofMaintained === true && (\r\n        <AlertResult alertHeader=\"Rate of Fire Maintained!\" />\r\n      )}\r\n      {isCowering === true &&\r\n        noCowering === false &&\r\n        doubleCowering === false && (\r\n          <AlertResult alertHeader=\"The Fire Group Cowers!\" />\r\n        )}\r\n      {isCowering === true &&\r\n        doubleCowering === true &&\r\n        noCowering === false && (\r\n          <AlertResult alertHeader=\"The Fire Group Double Cowers!\" />\r\n        )}\r\n      {combatResult !== '' && <AlertResult alertHeader={combatResult} />}\r\n    </ContainerIFT>\r\n  );\r\n};\r\n\r\nexport default CardIFT;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Random from 'random';\r\n\r\nimport dataCC from '../data/dataCC.json';\r\n\r\nconst Roller = styled.div`\r\n  text-align: center;\r\n\r\n  span {\r\n    color: #ff4252;\r\n  }\r\n`;\r\n\r\nconst RollButton = styled.button`\r\n  width: 8em;\r\n  height: 2em;\r\n  background-color: #d43346;\r\n  color: #802343;\r\n  border: 3px solid #802343;\r\n  border-radius: 2px;\r\n  font-size: 2em;\r\n`;\r\n\r\n// Simple function to generate a 1d6 die roll.\r\nconst generateDieRoll = () => {\r\n  return Random.int(1, 6);\r\n};\r\n\r\n// Function to determine the CC Odds and get the related To Kill Number.\r\nconst getToKillNumber = ratioFP => {\r\n  for (let i in dataCC) {\r\n    if (ratioFP === 10) {\r\n      return 12;\r\n    } else if (ratioFP > 10) {\r\n      return 13;\r\n    } else if (ratioFP >= dataCC[i].Min && ratioFP < dataCC[i].Max) {\r\n      return Number(i);\r\n    }\r\n  }\r\n};\r\n\r\nconst rollTheDice = props => {\r\n  // This was originally just setDieOne(generateDieRoll()) etc., however this allows for better splitting of needs.\r\n  let dieOne = generateDieRoll();\r\n  let dieTwo = generateDieRoll();\r\n\r\n  // Set die states.\r\n  props.setDieOne(dieOne);\r\n  props.setDieTwo(dieTwo);\r\n  let resultTotal = dieOne + dieTwo + Number(props.closeCombatModifier);\r\n  props.setDiceTotal(resultTotal);\r\n\r\n  // Find CC Ratio and set various states\r\n  let ratioFP = props.atkFirePower / props.defFirePower;\r\n  let toKillNumber = getToKillNumber(ratioFP);\r\n  if (props.handToHand === true) {\r\n    toKillNumber += 2;\r\n  }\r\n  props.setCombatRatio(\r\n    `The Odds are ${\r\n      dataCC[toKillNumber].Ratio\r\n    } | The To Kill Number is ${toKillNumber}`\r\n  );\r\n\r\n  // Determine results\r\n  if (resultTotal < toKillNumber) {\r\n    props.setCloseCombatResult('Defending Units Eliminated');\r\n  } else if (resultTotal === toKillNumber) {\r\n    props.setCloseCombatResult('Defending Units Partial Kill');\r\n  } else {\r\n    props.setCloseCombatResult('No Result');\r\n  }\r\n};\r\n\r\nconst DiceRollerCC = ({\r\n  atkFirePower,\r\n  defFirePower,\r\n  closeCombatModifier,\r\n  handToHand,\r\n  setCombatRatio,\r\n  setCloseCombatResult\r\n}) => {\r\n  const [dieOne, setDieOne] = useState(0);\r\n  const [dieTwo, setDieTwo] = useState(0);\r\n  const [diceTotal, setDiceTotal] = useState(0);\r\n\r\n  return (\r\n    <Roller>\r\n      <RollButton\r\n        onClick={() =>\r\n          rollTheDice({\r\n            setDieOne,\r\n            setDieTwo,\r\n            setDiceTotal,\r\n            atkFirePower,\r\n            defFirePower,\r\n            closeCombatModifier,\r\n            handToHand,\r\n            setCombatRatio,\r\n            setCloseCombatResult\r\n          })\r\n        }>\r\n        Roll\r\n      </RollButton>\r\n      <h4>\r\n        Dice Rolls: <span>{dieOne}</span> | {dieTwo}\r\n      </h4>\r\n      <h3>Total: {diceTotal}</h3>\r\n    </Roller>\r\n  );\r\n};\r\n\r\nexport default DiceRollerCC;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport BoxValue from './BoxValue';\r\nimport CheckBoxValue from './CheckBoxValue';\r\nimport DiceRollerCC from './DiceRollerCC';\r\nimport AlertResult from './AlertResult';\r\n\r\nconst ContainerCC = styled.div`\r\n  background-color: #212121;\r\n  padding-bottom: 0.5em;\r\n\r\n  h2 {\r\n    background-color: #ff4252;\r\n    padding-left: 3px;\r\n    padding-bottom: 3px;\r\n  }\r\n  form {\r\n    padding-left: 1em;\r\n    padding-right: 1em;\r\n    padding-bottom: 1em;\r\n  }\r\n  .div-boxes {\r\n    display: flex;\r\n    flex-flow: wrap;\r\n    justify-content: space-evenly;\r\n    padding-bottom: 1em;\r\n  }\r\n  .div-roller {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst CardCC = () => {\r\n  const [atkFirePower, setAtkFirePower] = useState(1);\r\n  const [defFirePower, setDefFirePower] = useState(0);\r\n  const [closeCombatModifier, setCloseCombatModifier] = useState(0);\r\n  const [handToHand, setHandToHand] = useState(false);\r\n  const [combatRatio, setCombatRatio] = useState('');\r\n  const [closeCombatResult, setCloseCombatResult] = useState('');\r\n\r\n  return (\r\n    <ContainerCC>\r\n      <h2>Close Combat Table</h2>\r\n      <form>\r\n        <div className=\"div-boxes\">\r\n          <BoxValue\r\n            title=\"Attacker's FirePower\"\r\n            thisNumberValue={atkFirePower}\r\n            thisStateSet={setAtkFirePower}\r\n          />\r\n          <BoxValue\r\n            title=\"Defender's FirePower\"\r\n            thisNumberValue={defFirePower}\r\n            thisStateSet={setDefFirePower}\r\n          />\r\n          <BoxValue\r\n            title=\"Modifier\"\r\n            thisNumberValue={closeCombatModifier}\r\n            thisStateSet={setCloseCombatModifier}\r\n          />\r\n        </div>\r\n        <CheckBoxValue\r\n          title=\"Hand To Hand\"\r\n          info=\"\"\r\n          thisCheckValue={handToHand}\r\n          thisStateSet={setHandToHand}\r\n        />\r\n      </form>\r\n      <div className=\"div-roller\">\r\n        <DiceRollerCC\r\n          atkFirePower={atkFirePower}\r\n          defFirePower={defFirePower}\r\n          closeCombatModifier={closeCombatModifier}\r\n          handToHand={handToHand}\r\n          setCombatRatio={setCombatRatio}\r\n          setCloseCombatResult={setCloseCombatResult}\r\n        />\r\n      </div>\r\n      {combatRatio !== '' && <AlertResult alertHeader={combatRatio} />}\r\n      {closeCombatResult !== '' && (\r\n        <AlertResult alertHeader={closeCombatResult} />\r\n      )}\r\n    </ContainerCC>\r\n  );\r\n};\r\n\r\nexport default CardCC;\r\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport CardIFT from './components/CardIFT';\nimport CardCC from './components/CardCC';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  div {\n    max-width: 800px;\n  }\n  h1 {\n    text-align: center;\n  }\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <h1>Advanced Squad Leader Combat Table Assistant</h1>\n      <div>\n        <CardIFT className=\"card-ift\" />\n        <CardCC className=\"card-cc\" />\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}